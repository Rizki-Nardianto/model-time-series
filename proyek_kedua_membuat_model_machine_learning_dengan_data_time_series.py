# -*- coding: utf-8 -*-
"""proyek-kedua-membuat-model-machine-learning-dengan-data-time-series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10PbHxCAqK0tz4lXE2I6x9s41_bdQAh80
"""

# import data
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Embedding, Bidirectional, Dropout

df = pd.read_csv('daily-min-temperatures.csv')
df.head()

df.isna().sum()

df.info()

temp=df['Temp'].values
temp

temp = temp.reshape((len(temp), 1))
scaler = MinMaxScaler(feature_range=(0, 1))
scaler = scaler.fit(temp)
print('Min_Temp: %f, Max_Temp: %f' % (scaler.data_min_, scaler.data_max_))

temp_normalized = scaler.transform(temp)
temp_arr = np.array(temp_normalized)
temp = temp_arr.flatten()
temp

dates = df['Date'].values
Temp = df['Temp'].values

plt.figure(figsize=(25,10))
plt.plot(dates, Temp)
plt.title('Temperature average', fontsize=20)

maxmin_values = (df['Temp'].max() - df['Temp'].min())
maxmin_values

threshold_mae = maxmin_values * 10/100
threshold_mae

X_train, X_test, y_train, y_test = train_test_split(dates, temp, test_size=0.2, shuffle=False)

print('Jumlah data keseluruhan = ',df.shape)
print('Jumlah Train',y_train.shape)
print('Jumlah Test',y_test.shape)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(y_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(y_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
    Bidirectional(LSTM(60, return_sequences=True)),
    Dropout(0.2),
    Bidirectional(LSTM(60)),
    Dense(68, activation="relu"),
    Dense(40, activation="relu"),
    Dense(10, activation="relu"),
    Dense(1),
])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<threshold_mae):
      print("\mae telah mencapai nilai <10%!")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.legacy.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=100, validation_data=val_set, verbose=1, callbacks=callbacks)

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE Model')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

orgn_temp = df['Temp'].values

X_train, X_test, y_train, y_test = train_test_split(dates, orgn_temp, test_size=0.2, shuffle=False)

train_set = windowed_dataset(y_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(y_test, window_size=60, batch_size=100, shuffle_buffer=1000)

history_orgn = model.fit(train_set, epochs=100, validation_data=val_set, verbose=1, callbacks=callbacks)

plt.plot(history_orgn.history['mae'])
plt.plot(history_orgn.history['val_mae'])
plt.title('Mae Model')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history_orgn.history['loss'])
plt.plot(history_orgn.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()